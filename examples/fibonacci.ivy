
-- Ivy supports pattern-matching for function definitions. This is especially 
-- useful for recursive functions.

-- For example, if we take a look at the two function definitions for "fib" 
-- below, we are telling ivy that the function "fib" should map an input of 
-- integer 0 to an output of integer 0. Similarly, the function "fib" should 
-- also map an input of integer 1 to an output of integer 1. 
let fib = fn(0) => 0;   -- Base case
let fib = fn(1) => 1;   -- Base case

-- Finally, in the third case, we say that the function "fib" should map a 
-- variable "n" to the expression to the right of the arrow:
--          "fib(n - 2) + fib(n - 1)"
-- which completes the recursive defintion for "fib". 
let fib = fn(n) => fib(n - 2) + fib(n - 1); -- Recursive case

-- For recursive definitions in ivy, We must define the input and outputs for 
-- the base cases before the recursive cases because the input for the function
-- gets compared to the inputs in the order in which they were defined. If we 
-- defined the recursive case first, the function would never end since it'll 
-- always match to "n" before any of the 0 or 1 cases.

let a = fib(6);
let b = fib(3);

-- Prints "fib(6) = 8"
-- println("fib(6) = ", a);

print(1);

-- Prints "fib(3) = 2".
-- println("fib(3) = ", b);
