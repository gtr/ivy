
package prelude;

-------------------------------------------------------------------------------
--
-- Package      : prelude
-- Author       : Gerardo Torres Castro
-- Date         : August 30, 2022
-- License      : GNU Public License
--
-- The Ivy programming language standard prelude, which is automatically loaded 
-- for all ivy programs invoked from the ivy REPL and the ivy compiler. This 
-- package includes base data types including `Bool`, `String`, `Int`, 
-- `Optional<a>`, `Result<a, B>` etc. ; base traits like `__show__`, 
-- `__ord__`, and `__eq__`; and common utility functions like `map`, `filter`, etc.
-- 
-- Some base data types and functions (such as those dealing with I/O or time)
-- are implemented using Rust. To disable the ivy compiler from automatically
-- loading the prelude, run with the `--no-prelude` option.
--
------------------------------------------------------------------------------

--- ---------------------------------------------------------------------------
--- Built-in data types
--- ---------------------------------------------------------------------------

data Bool   ( True | False ); 
data Char   ();
data String ();
data Int    ();

--- ---------------------------------------------------------------------------
--- Built-in traits
--- ---------------------------------------------------------------------------

--- The `Show` trait is used to transform a data type into a string 
--- representation. This is often used for printing to standard out.
--- 
--- Minimal complete definition: 
---     * fn __show__ :: a -> String;
trait Show (
    fn __show__ :: a -> String;
);

--- The `Equal` trait is used to determine structural equality. This can be
--- used to overload the `==` and `!=` operators. 
---
--- Minimal complete definition: 
---     * fn `__==__` :: (a, a) -> Bool;
trait Equal (
    --- Returns `True` if the two given objects share structural equality.
    ---
    --- This means two objects may be considered equal, if their structure is 
    --- equal, regardless of their memory locations.
    fn __==__ :: (a, a) -> Bool;

    --- Returns `True` if the two given objects do not share structural 
    --- equality.
    fn __!=__            :: (a, a) -> Bool;
    fn __!=__ (lhs, rhs) => not (lhs == rhs);
);

--- a data type describing the ordering between two values. Used in the 
--- `Compare` trait.
data Ordering (
    | Less
    | Equal
    | Greater
);
